<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-type" content="text/html; charset=utf-8">
    <title>Proj..</title>
    <link rel="stylesheet" type="text/css" href="stylesheet.css">
    <script src="d3.v3.min.js"></script>
    <script src="jquery.min.js"></script>
    
    <style type="text/css">
    .node {
      stroke: #fff;
      stroke-width: 1.5px;
    }

    .link {
      stroke: #999;
      stroke-opacity: .6;
    }
    
    .node:hover, .link:hover {
      stroke: rgb(76, 179, 218);
    }
    </style>
  </head>
  <body>
    <svg id="svgCanvas" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" onmouseup="handleMouseUp(evt)" onmousedown="handleMouseDown(evt)" onmousemove="handleMouseMove(evt)">
      <g id="viewport"></g>
    </svg>
    <script src="svgpan.js"></script>
    <div id="show-file-upload"></div>
    <div id="show-sidebar"></div>
    <div id="file-upload">
      drag and drop an intervention folder/files here
      <div id="status">
        <span id="current_file_progress">0</span>/<span id="total_files">0</span>
      </div>
    </div>
    <ul id="sidebar">
      <li class="small-li" id="hide-sidebar">
        hide sidebar
      </li>
      <li class="small-li" id="toggle-all">
        toggle all layers
      </li>
      <li class="small-li" id="clear-all">
        clear all layers
      </li>
      <li id='show_link'>
        <div class="layer">
          <svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="50px" height="20px">
            <line x1="10" y1="10" x2="40" y2="10" style="stroke:rgb(255,49,0);stroke-width:2" />
            <circle cx="10" cy="10" r="5" stroke="white" stroke-width="1.5" fill="rgb(76, 179, 218)" />
            <circle cx="40" cy="10" r="5" stroke="white" stroke-width="1.5" fill="rgb(76, 179, 218)" />
          </svg>
          <br />
          <span class="text">Highlight<br /><strong>show</strong> links</span>
        </div>
      </li>
      <li id='after_link'>
        <div class="layer">
          <svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="50px" height="20px">
            <line x1="10" y1="10" x2="40" y2="10" style="stroke:rgb(100,12,171);stroke-width:2" />
            <circle cx="10" cy="10" r="5" stroke="white" stroke-width="1.5" fill="rgb(76, 179, 218)" />
            <circle cx="40" cy="10" r="5" stroke="white" stroke-width="1.5" fill="rgb(76, 179, 218)" />
          </svg>
          <br />
          <span class="text">Highlight<br /><strong>after</strong> links</span>
        </div>
      </li>
      <li id='div_link'>
        <div class="layer">
          <svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="50px" height="20px">
            <line x1="10" y1="10" x2="40" y2="10" style="stroke:rgb(65,219,0);stroke-width:2" />
            <circle cx="10" cy="10" r="5" stroke="white" stroke-width="1.5" fill="rgb(76, 179, 218)" />
            <circle cx="40" cy="10" r="5" stroke="white" stroke-width="1.5" fill="rgb(76, 179, 218)" />
          </svg>
          <br />
          <span class="text">Highlight<br /><strong>div</strong> links</span>
        </div>
      </li>
      <li id='a_link'>
        <div class="layer">
          <svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="50px" height="20px">
            <line x1="10" y1="10" x2="40" y2="10" style="stroke:rgb(12,93,165);stroke-width:2" />
            <circle cx="10" cy="10" r="5" stroke="white" stroke-width="1.5" fill="rgb(76, 179, 218)" />
            <circle cx="40" cy="10" r="5" stroke="white" stroke-width="1.5" fill="rgb(76, 179, 218)" />
          </svg>
          <br />
          <span class="text">Highlight<br /><strong>a href</strong> links</span>
        </div>
      </li>
    </ul>
  </body>

  <script type="text/javascript">
  //styling JS
  $("#sidebar").height($(window).height());
  $("#layers").height($(window).height());
  $("#file-upload").css("top", $(window).height()/2-130);
  $("#file-upload").css("left", $(window).width()/2-125);

  $("#show-file-upload").hide();
  $("#sidebar").hide();
  $("#show-sidebar").hide();
  $("#show-file-upload").click(function() {
    $("#file-upload").show();
    $("#show-file-upload").hide()
    $("#sidebar").hide();
    $("g").empty();
    $.each($('li.selected'), function() {
      $(this).removeClass('selected')
    });
  });
  
  $("#show-sidebar").click(function() {
    $("#sidebar").show();
    $("#show-sidebar").hide()
  });
  
  $("#hide-sidebar").click(function() {
    $("#sidebar").hide();
    $("#show-sidebar").show();
  });
  
  $("#toggle-all").click(function() {
    $.each($("li:not(.small-li)"), function() {
      if (!$(this).hasClass("selected")) {
        $(this).trigger('click');
      }
    });
  });
  
  $("#clear-all").click(function() {
    $.each($("li:not(.small-li)"), function() {
      if ($(this).hasClass("selected")) {
        $(this).trigger('click');
      }
    });
  });
  </script>
  
  <script type="text/javascript">
  //layers
  $("li").click(function() {
    if ($(this).hasClass("selected")) {
      $(this).removeClass("selected");
      switch(this['id']) {
        case 'show_link':
          resetLink('show');
          break;
        case 'after_link':
          resetLink('after');
          break;
        case 'div_link':
          resetLink('div');
          break;
        case 'a_link':
          resetLink('a');
          break;
      }
    } else {
      $(this).addClass("selected");
      switch(this['id']) {
        case 'show_link':
          colourLink('show', 'rgb(255,49,0)');
          break;      
        case 'after_link':
          colourLink('after', 'rgb(100,12,171)');
          break;
        case 'div_link':
          colourLink('div', 'rgb(65,219,0)');
          break;
        case 'a_link':
          colourLink('a', 'rgb(12,93,165)');
          break;
        default:
          $(this).removeClass("selected");
          break;
      }
    }
  });
  
  function colourLink(type, colour) {
    $.each($('line'), function(index, value) {
      if (this.getAttribute('type') == type) {
        this.style['stroke'] = colour;
      }
    });
  }
  
  function resetLink(type) {
    $.each($('line'), function(index, value) {
      if (this.getAttribute('type') == type) {
        this.style['stroke'] = "#999";
      }
    });
  }
  </script>
  
  <script type="text/javascript">
  var fileCount = 0;
  var uploadCount = 0;
  //dnduploader:
  //http://onehub.com/blog/posts/designing-an-html5-drag-drop-file-uploader-using-sinatra-and-jquery-part-1/
  (function( $ ){

    var methods = {
      init : function( options ) {
        
      return this.each(function(){
         var $this = $(this);
         
         $.each(options, function( label, setting ) {
           $this.data(label, setting);
         });

         $this.bind('dragenter.dndUploader', methods.dragEnter);
         $this.bind('dragover.dndUploader', methods.dragOver);
         $this.bind('drop.dndUploader', methods.drop);
       });
      },

      dragEnter : function ( event ) {    
        event.stopPropagation();
        event.preventDefault();

        return false;
      },

      dragOver : function ( event ) {      
        event.stopPropagation();
        event.preventDefault();

        return false;
      },

      drop : function( event ) {
        event.stopPropagation();
        event.preventDefault();
        // console.log( event.originalEvent.dataTransfer.files );
        
        var $this = $(this);
        var dataTransfer = event.originalEvent.dataTransfer;
        var files = dataTransfer.files;
        
        if (files.length > 0) {
          var item = dataTransfer.items[0].webkitGetAsEntry();
          if (item.isDirectory) {
            //http://blog.protonet.info/post/26894439416/html5-drag-drop-files-and-folders
            var dirReader = item.createReader();
            dirReader.readEntries(function(entries) {
              $.each(entries, function(i, entry) {
              // console.log(i + " " + entry);
                if (entry.isFile) {
                  entry.file(function(file) {
                    if (file['name'].match(/.+.(lgil|xml)/)) {
                      fileCount++;
                      $('#total_files').text(fileCount);
                      // console.log("f(" + fileCount + ") " + i + ": " + file['name'] + " - " + file);
                      var xhr = new XMLHttpRequest();
                      var upload = xhr.upload;
                      xhr.open($this.data('method') || 'POST', $this.data('url'), true);
                      xhr.onreadystatechange = function() {
                        if (xhr.readyState == 4) {
                          uploadCount++;
                          $('#current_file_progress').text(uploadCount);
                          processResults()
                        }
                      }
                      xhr.setRequestHeader('X_FILENAME', file['name']);
                      xhr.send(file);
                    }
                  });
                }
              });
            });
          } else {
            $.each(files, function ( i, file ) {
              if (file['name'].match(/.+.(lgil|xml)/)) {
                fileCount++;
                $('#total_files').text(fileCount);
                // console.log("s(" + fileCount + ") " + i + ": " + file['name'] + " - " + file);
                var xhr = new XMLHttpRequest();
                var upload = xhr.upload;
                xhr.open($this.data('method') || 'POST', $this.data('url'), true);
                xhr.onreadystatechange = function() {
                  if (xhr.readyState == 4) {
                    uploadCount++;
                    $('#current_file_progress').text(uploadCount);
                    processResults()
                  }
                }
                xhr.setRequestHeader('X_FILENAME', file['name']);
                xhr.send(file);
              }
            });
          }
        };
        return false;
      }
    };
    
    $.fn.dndUploader = function( method ) {
      if ( methods[method] ) {
        return methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));
      } else if ( typeof method === 'object' || ! method ) {
        return methods.init.apply( this, arguments );
      } else {
        $.error( 'Method ' +  method + ' does not exist on jQuery.dndUploader' );
      }
    };
  })( jQuery );
  </script>
  
  <script type="text/javascript">
    $("#file-upload").dndUploader({
      url : "/upload",
      method : "PUT"
    });
  </script>
  
  <script type="text/javascript">
  //Code to read files and ajax post to server
  function processResults() {
    // console.log('in progress: ' + uploadCount + '/' + fileCount);
    if (fileCount == uploadCount) {
      fileCount = 0;
      uploadCount = 0;
      $('#total_files').text('0');
      $('#current_file_progress').text('0');
      $("#file-upload").hide();
      $("#sidebar").show();
      $("#show-file-upload").show();
      $.get('processFiles', function(data) {
        drawGraph(JSON.parse(data));
      });
    }
  }
  </script>

  <script type="text/javascript">
  function showInformation(obj, node) {
    var top, left;
    $("#graph").append("<div id='graph-tooltip'>");
    if (node) {
      $('#graph-tooltip').append("Node name: " + obj['name']);
      top = obj['y'] - 10;
      left = obj['x'] + 10;
    } else {
      var sourceNode = obj["source"];
      var targetNode = obj["target"];
      $('#graph-tooltip').append("Link value: " + obj['value']);
      top = (sourceNode['y'] + targetNode['y']) / 2 - 10;
      left = (sourceNode['x'] + targetNode['x']) / 2 + 10;
    }
    $("#graph").append("</div>");

    $('#graph-tooltip').css("top", top+"px");
    $('#graph-tooltip').css("left", left+"px");
  }

  function hideInformation(obj) {
    $('#graph-tooltip').remove();
  }

  //Code to produce tree
  //http://bl.ocks.org/4062045
  var width = $(window).width()-150,
      height = $(window).height()-50;

  var color = d3.scale.category20();

  var force = d3.layout.force()
      .charge(-120)
      .linkDistance(30)
      .size([width, height]);

  function drawGraph(graph) {
    var svg = d3.select("g")
        .attr("width", width)
        .attr("height", height)
    
    force
      .nodes(graph.nodes)
      .links(graph.links)
      .start();

    var link = svg.selectAll(".link")
      .data(graph.links)
      .enter().append("line")
      .attr("class", "link")
      .attr("type", function(d) { return d.type })
      .on("mouseover", function(d) { showInformation(d, false); })
      .on("mouseout", function(d) { hideInformation(d, false); })
      .style("stroke-width", function(d) { return Math.sqrt(d.value); });
    
    link.append("title")
      .text(function(d) { return d.value; })

      var foo;
    var node = svg.selectAll(".node")
      .data(graph.nodes)
      .enter().append("circle")
      .attr("class", "node")
      .attr("r", 5)
      .style("fill", function(d) { return color(d.group); })
      .on("mouseover", function(d) { showInformation(d, true); })
      .on("mouseout", function(d) { hideInformation(d, true); })
      .call(force.drag);

    node.append("page")
      .text(function(d) { return d.name; });

    force.on("tick", function() {
      link.attr("x1", function(d) { return d.source.x; })
          .attr("y1", function(d) { return d.source.y; })
          .attr("x2", function(d) { return d.target.x; })
          .attr("y2", function(d) { return d.target.y; });

      node.attr("cx", function(d) { return d.x; })
          .attr("cy", function(d) { return d.y; });
    });
  }
  </script>
</html>