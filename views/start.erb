<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-type" content="text/html; charset=utf-8">
    <title>Proj..</title>
    <link rel="stylesheet" type="text/css" href="stylesheet.css">
    <script src="d3.v3.min.js"></script>
    <script src="jquery.min.js"></script>
    
    <style type="text/css">
    .node {
      stroke: #fff;
      stroke-width: 1.5px;
    }

    .link {
      stroke: #999;
      stroke-opacity: .6;
    }
    
    .node:hover, .link:hover {
      stroke: rgb(76, 179, 218);
    }
    </style>
  </head>
  <body>
    <div id="show-file-upload"></div>
    <div id="file-upload">
      <!-- <input type="file" id="file" name="file" enctype="multipart/form-data" multiple /> -->
    </div>
    <div id="graph-container">
      <div id="graph"></div>
    </div>
    <div id="sidebar-container">
      <ul id="layers">
        <li id='nodetype'>Highlight node type</li>
        <li>Label2</li>
        <li>Label3</li>
        <li>Label4</li>
        <li>Label5</li>
        <li>Label6</li>
        <li>Label7</li>
        <li>Label8</li>
        <li>Label9</li>
      </ul>
    </div>
  </body>
  <script type="text/javascript">
  //dnduploader:
  //http://onehub.com/blog/posts/designing-an-html5-drag-drop-file-uploader-using-sinatra-and-jquery-part-1/
  (function( $ ){

    var methods = {
      init : function( options ) {

      return this.each(function(){

         var $this = $(this);
         
         $.each(options, function( label, setting ) {
           $this.data(label, setting);
         });

         $this.bind('dragenter.dndUploader', methods.dragEnter);
         $this.bind('dragover.dndUploader', methods.dragOver);
         $this.bind('drop.dndUploader', methods.drop);
       });
      },

      dragEnter : function ( event ) {    
        event.stopPropagation();
        event.preventDefault();

        return false;
      },

      dragOver : function ( event ) {      
        event.stopPropagation();
        event.preventDefault();

        return false;
      },

      drop : function( event ) {    
        event.stopPropagation();
        event.preventDefault();
        // console.log( event.originalEvent.dataTransfer.files );
        
        var $this = $(this);
        var dataTransfer = event.originalEvent.dataTransfer;
        
        if (dataTransfer.files.length > 0) {
          $.each(dataTransfer.files, function ( i, file ) {
            var item = dataTransfer.items[i].webkitGetAsEntry();
            if (item.isFile) {
              if (file['name'].match(/.+.(lgil|xml)/)) {
                //this will be called recursively eventually
                console.log(i + " " + file);
                console.log(file['name']);
                var xhr = new XMLHttpRequest();
                var upload = xhr.upload;
                xhr.open($this.data('method') || 'POST', $this.data('url'), true);
                xhr.setRequestHeader('X_FILENAME', file['name']);
                xhr.send(file);
              }
            } else if (item.isDirectory) {
              console.log('directory');
            }
          });
        };
        
        return false;
      }
    };

    $.fn.dndUploader = function( method ) {
      if ( methods[method] ) {
        return methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));
      } else if ( typeof method === 'object' || ! method ) {
        return methods.init.apply( this, arguments );
      } else {
        $.error( 'Method ' +  method + ' does not exist on jQuery.dndUploader' );
      }
    };
  })( jQuery );
  </script>
  
  <script type="text/javascript">
    $("#file-upload").dndUploader({
      url : "/upload",
      method : "PUT"
    });
  </script>
  
 <!--   <script type="text/javascript">
   //styling JS
   var graphWidth =$(window).width()-150;
   var graphHeight =$(window).height()-20;
   $("#sidebar-container").height($(window).height());
   $("#layers").height($(window).height());
   $("#file-upload").css("top", $(window).height()/2-100);
   $("#file-upload").css("left", $(window).width()/2-200);
   $("#graph-container").width(graphWidth);
   $("#graph").width(graphWidth);
   $("#graph").height(graphHeight);
   
   $("li").click(function() {
     if ($(this).hasClass("selected")) {
       $(this).removeClass("selected");
       switch(this['id']) {
         case 'nodetype':
           $.each($('circle'), function(index, value) {
             this.style['fill'] = "#1f77b4";
           });
           break;
       }
     } else {
       $(this).addClass("selected");
       switch(this['id']) {
         case 'nodetype':
           $.each($('circle'), function(index, value) {
             if (this.getAttribute('type') == 'show') {
               this.style['fill'] = "#000";
             } else if (this.getAttribute('type') == 'after') {
               this.style['fill'] = "#CCC";
             }
           });
           break;
       }
     }
   });
   
   $("#show-file-upload").hide();
   $("#show-file-upload").click(function() {
     $("#file-upload").show();
     $("#show-file-upload").hide();
     $("svg").remove();
   });
   </script>
   
   <script type="text/javascript">
   //Code to read files and ajax post to server
   document.getElementById('file').addEventListener('change', readFile, false);

   function readFile (evt) {
     var files = evt.target.files;
     var logic_file;
     var xml_files = [];
     $.each(files, function(index, value) {
       if (value['name'].match(/.+.lgil/)) {
         logic_file = files[index];
       } else if (value['name'].match(/.+.xml/)) {
         xml_files.push(files[index]);
       }
     });
     
     console.log(logic_file);
     console.log(xml_files);
     ///--------------------------------------now to do something with these files!
     var reader = new FileReader();
     reader.onload = function() {
       post(this.result);            
     }
     reader.readAsText(file)
   }
   
   function post(lgil, xml) {
     $("#file-upload").hide();
     $("#show-file-upload").show();
     $('#file').replaceWith($('#file').val('').clone(true));
     document.getElementById('file').addEventListener('change', readFile, false);
     $.post('xmlUpload', xml, function(data) { });
     $.post('lgilUpload', lgil, function(data) {
       drawGraph(JSON.parse(data));
     });
   }
   </script>
   
   <script type="text/javascript">
   function showInformation(obj, node) {
     var top, left;
     $("#graph").append("<div id='graph-tooltip'>");
     if (node) {
       $('#graph-tooltip').append("Node name: " + obj['name']);
       top = obj['y'] - 10;
       left = obj['x'] + 10;
     } else {
       var sourceNode = obj["source"];
       var targetNode = obj["target"];
       $('#graph-tooltip').append("Link value: " + obj['value']);
       top = (sourceNode['y'] + targetNode['y']) / 2 - 10;
       left = (sourceNode['x'] + targetNode['x']) / 2 + 10;
     }
     $("#graph").append("</div>");

     $('#graph-tooltip').css("top", top+"px");
     $('#graph-tooltip').css("left", left+"px");
   }
   
   function hideInformation(obj) {
     $('#graph-tooltip').remove();
   }
   
   //Code to produce tree
   //http://bl.ocks.org/4062045
   var width = graphWidth,
       height = graphHeight;

   var color = d3.scale.category20();

   var force = d3.layout.force()
       .charge(-120)
       .linkDistance(30)
       .size([width, height]);

   function drawGraph(graph) {
     var svg = d3.select("#graph").append("svg")
         .attr("width", width)
         .attr("height", height);
     
     force
       .nodes(graph.nodes)
       .links(graph.links)
       .start();

     var link = svg.selectAll(".link")
       .data(graph.links)
       .enter().append("line")
       .attr("class", "link")
       .on("mouseover", function(d) { showInformation(d, false); })
       .on("mouseout", function(d) { hideInformation(d, false); })
       .style("stroke-width", function(d) { return Math.sqrt(d.value); });
       
     link.append("title")
       .text(function(d) { return d.value; })

       var foo;
     var node = svg.selectAll(".node")
       .data(graph.nodes)
       .enter().append("circle")
       .attr("class", "node")
       .attr("r", 5)
       .attr("type", function(d) { return d.type })
       .style("fill", function(d) { return color(d.group); })
       .on("mouseover", function(d) { showInformation(d, true); })
       .on("mouseout", function(d) { hideInformation(d, true); })
       .call(force.drag);

     node.append("page")
       .text(function(d) { return d.name; });

     force.on("tick", function() {
       link.attr("x1", function(d) { return d.source.x; })
           .attr("y1", function(d) { return d.source.y; })
           .attr("x2", function(d) { return d.target.x; })
           .attr("y2", function(d) { return d.target.y; });

       node.attr("cx", function(d) { return d.x; })
           .attr("cy", function(d) { return d.y; });
     });
   }
   </script> -->
</html>