<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-type" content="text/html; charset=utf-8">
    <title>Proj..</title>
    <link rel="stylesheet" type="text/css" href="stylesheet.css">
    <script src="d3.v3.min.js"></script>
    <script src="jquery.min.js"></script>
    
    <style type="text/css">
    .node {
      stroke: #fff;
      stroke-width: 1.5px;
    }

    .link {
      stroke: #999;
      stroke-opacity: .6;
    }
    
    .node:hover, .link:hover {
      stroke: rgb(76, 179, 218);
    }
    </style>
  </head>
  <body>
    <div id="file-upload">
      <input type="file" id="file" name="file" enctype="multipart/form-data" />
    </div>
    <div id="graph-container">
      <div id="graph"></div>
    </div>
    <div id="sidebar-container">
      <ul id="layers">
        <li>Label1</li>
        <li>Label2</li>
        <li>Label3</li>
        <li>Label4</li>
        <li>Label5</li>
        <li>Label6</li>
        <li>Label7</li>
        <li>Label8</li>
        <li>Label9</li>
      </ul>
    </div>
  </body>
  <script type="text/javascript">
  //styling JS
  var graphWidth =$(window).width()-150;
  var graphHeight =$(window).height()-20;
  $("#sidebar-container").height($(window).height());
  $("#layers").height($(window).height());
  $("#file-upload").css("top", $(window).height()/2-100);
  $("#file-upload").css("left", $(window).width()/2-200);
  $("#graph-container").width(graphWidth);
  $("#graph").width(graphWidth);
  $("#graph").height(graphHeight);
  
  $("li").click(function() {
    if ($(this).hasClass("selected")) {
      $(this).removeClass("selected");
    } else {
      $(this).addClass("selected");
    }
  });
  </script>
  
  <script type="text/javascript">
  //Code to read files and ajax post to server
  document.getElementById('file').addEventListener('change', readFile, false);

  function readFile (evt) {
    var files = evt.target.files;
    var file = files[0];           
    var reader = new FileReader();
    reader.onload = function() {
      post(this.result);            
    }
    reader.readAsText(file)
  }
  
  function post(input) {
    $("#file-upload").hide();
    $.post('dataUpload', input, function(data) {
      drawGraph(JSON.parse(data));
    });
  }
  </script>
  
  <script type="text/javascript">
  function showInformation(obj, node) {
    var top, left;
    $("#graph").append("<div id='graph-tooltip'>");
    if (node) {
      $('#graph-tooltip').append("Node name: " + obj['name']);
      top = obj['y'] - 10;
      left = obj['x'] + 10;
    } else {
      var sourceNode = obj["source"];
      var targetNode = obj["target"];
      $('#graph-tooltip').append("Link value: " + obj['value']);
      top = (sourceNode['y'] + targetNode['y']) / 2 - 10;
      left = (sourceNode['x'] + targetNode['x']) / 2 + 10;
    }
    $("#graph").append("</div>");

    $('#graph-tooltip').css("top", top+"px");
    $('#graph-tooltip').css("left", left+"px");
  }
  
  function hideInformation(obj) {
    $('#graph-tooltip').remove();
  }
  
  //Code to produce tree
  //http://bl.ocks.org/4062045
  var width = graphWidth,
      height = graphHeight;
      
  // var width = 768,
  //     height = 500;

  var color = d3.scale.category20();

  var force = d3.layout.force()
      .charge(-120)
      .linkDistance(30)
      .size([width, height]);

  var svg = d3.select("#graph").append("svg")
      .attr("width", width)
      .attr("height", height);

  function drawGraph(graph) {    
    force
      .nodes(graph.nodes)
      .links(graph.links)
      .start();

    var link = svg.selectAll(".link")
      .data(graph.links)
      .enter().append("line")
      .attr("class", "link")
      .on("mouseover", function(d) { showInformation(d, false); })
      .on("mouseout", function(d) { hideInformation(d, false); })
      .style("stroke-width", function(d) { return Math.sqrt(d.value); });
      
    link.append("title")
      .text(function(d) { return d.value; })

      var foo;
    var node = svg.selectAll(".node")
      .data(graph.nodes)
      .enter().append("circle")
      .attr("class", "node")
      .attr("r", 5)
      .style("fill", function(d) { return color(d.group); })
      .on("mouseover", function(d) { showInformation(d, true); })
      .on("mouseout", function(d) { hideInformation(d, true); })
      .call(force.drag);

    node.append("page")
      .text(function(d) { return d.name; });

    force.on("tick", function() {
      link.attr("x1", function(d) { return d.source.x; })
          .attr("y1", function(d) { return d.source.y; })
          .attr("x2", function(d) { return d.target.x; })
          .attr("y2", function(d) { return d.target.y; });

      node.attr("cx", function(d) { return d.x; })
          .attr("cy", function(d) { return d.y; });
    });
  }
  </script>
</html>